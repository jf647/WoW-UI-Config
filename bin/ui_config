#!/usr/bin/perl
#
# $Id$ $Date$
#

use strict;
use warnings;

use Archive::Zip qw|:ERROR_CODES :CONSTANTS|;
use FindBin;
use Getopt::Long;
use Hash::Merge::Simple qw|merge|;
use Template;
use Path::Class qw|dir file|;

use lib "$FindBin::Bin/../lib";

use WoWUI::Config;
use WoWUI::Machines;
use WoWUI::Modules;
use WoWUI::ExtraFiles;

# parse command line
my %o = (
    configdir => [ "$FindBin::Bin/../etc", "$FindBin::Bin/../private" ],
    configfile => "ui_config.yaml",
    machinesfile => '$PRIVATEDIR/machines.yaml',
    clean => 1,
    debug => [],
    trace => [],
);
GetOptions(
    \%o,
    'configfile=s',
    'configdir=s@',
    'machinesfile=s',
    'clean!',
    'debug=s@',
    'trace=s@',
    'outputdir=s',
) or die "can't parse command line";
my @machines = @ARGV;
die "machine required" unless( @machines );

# load the main config
my $cfg = WoWUI::Config->initialize( dirs => $o{configdir}, file => $o{configfile} )->cfg;

# allow override of outputdir
if( $o{outputdir} ) {
  $cfg->{dirs}->{outputdir} = dir( $o{outputdir} )->absolute->stringify;
}

# init logging
my $logcfg = $cfg->{logging};
if( @{ $o{debug} } ) {
    for my $category( @{ $o{debug} } ) {
        $logcfg->{"log4perl.logger.$category"} = 'DEBUG';
    }
}
if( @{ $o{trace} } ) {
    for my $category( @{ $o{trace} } ) {
        $logcfg->{"log4perl.logger.$category"} = 'TRACE';
    }
}
Log::Log4perl->init( $logcfg );
my $log = Log::Log4perl->get_logger('main');
$log->info('START');

eval {

    # create a machines object
    my $machines = WoWUI::Machines->initialize( $o{machinesfile} );

    # execute our main loop for each machine requested
    for my $machname( @machines ) {
        process_machine( $machname );
    }

};
if( $@ ) {
    $log->fatal($@);
    exit(1);
}

# all done
$log->info('STOP');
exit(0);

# process a machine
sub process_machine
{

    my $machname = shift;

    $log->info("processing machine $machname");

    # create a temp dir in which to work
    my $tempdir = WoWUI::Util::tempdir( $o{clean}, 1 );

    # get our machine object
    my $machine = WoWUI::Machines->instance->machine_get( $machname );

    # make sure our output is writeable
    unless( -w $machine->output->parent ) {
      die "can't write to ", $machine->output->parent;
    }
    if( -f $machine->output && ! -w $machine->output ) {
      die "can't write to ", $machine->output;
    }
    
    # iterate over players
    for my $player( $machine->players ) {
        $log->info("processing player ", $player->name);
        # iterate over modules
        for my $modname( @{ $cfg->{modules} } ) {
            $log->info("processing module $modname");
            my $module = WoWUI::Modules->instance->module_get($modname);
            $module->machine( $machine );
            $module->player( $player );
            $module->process;
        }
    }
    
    # create an archive of the tempdir
    my $zip = Archive::Zip->new();
    while( my $dir = $tempdir->next ) {
        next unless( -d $dir );
        next if( $dir eq $tempdir );
        next if( $dir =~ m/\.\.?$/ );
        unless( AZ_OK == $zip->addTree($dir, $dir->relative($tempdir)) ) {
            die "addTree error: $dir";
        }
    }
    # add in any extra files
    for my $file( WoWUI::ExtraFiles->files ) {
        my $zipdst = WoWUI::ExtraFiles->zipfile($file);
        $log->debug("adding extra file '$file' to zip as '$zipdst'");
        unless( AZ_OK == $zip->addFile($file, $zipdst) ) {
            die "addFile error: $file";
        }
    }
    WoWUI::ExtraFiles->reset;
    unless ( $zip->writeToFileNamed($machine->output->stringify) == AZ_OK ) {
        die "write error";
    }
    $log->info("wrote settings to ", $machine->output);
    $log->info("tempdir for ", $machine->name, " is $tempdir") unless( $o{clean} );
    
}

#
# EOF
